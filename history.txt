git clone svn.nottingham.ac.uk/opt/git/betsv2.git
git clone svn:svn.nottingham.ac.uk/opt/git/betsv2.git
git clone svn:svn.nottingham.ac.uk/opt/git/betsv2
git clone svn:svn.nottingham.ac.uk/opt/git/WTTAuth.git
git clone ssh://mszadm@svn.nottingham.ac.uk/opt/git/betsv2.git
git init
git diff
git init
git log
git log
git tag
git --list
git --log
git -log
git
git log
git clone git://github.com/schacon/grit.git
git credential-osxkeychain
git credential-osxkeychain
git config --list
git push -u origin master
git push -u origin master
git diff
git diff
git diff --cached
git diff
git diff --cached
git config --global core.editor "vim"
git log
git log
git log
git rm ANOTHERFile.txt 
git log
git rm --cached doc/a.txt 
git rm --cached doc/a.txt 
git -a -v
git log
git rm --cached cachedfile.txt 
git log
git mv README.md README2.md 
git log -p -2
git log -p -3
git log -p
git log -Ul --word-diff
git log -U1 --word-diff
git log --stat
git log --pretty
git log --pretty=oneline
git log --pretty=format:"%h - %an, %ar : %s"
git log --pretty=format:"%H  Commit hash"
git log --pretty=format:"%T  Tree hash"
git log --pretty=format:"%t  Abbreviated tree hash"
git log --pretty=format:"%P  Parent hashes"
git log --pretty=format:"%p  Abbreviated parent hashes"
git log --pretty=format:"%an Author name"
git log --pretty=format:"%ae Author e-mail"
git log --pretty=format:"%ad Author date (format respects the --date= option)"
git log --pretty=format:"%ar Author date, relative"
git log --pretty=format:"%cn Committer name"
git log --pretty=format:"%ce Committer email"
git log --pretty=format:"%cd Committer date"
git log --pretty=format:"%cr Committer date, relative"
git log --pretty=format:"%s  Subject"
git log --pretty=format:"%h %s" --graph


Option  Description
-p  Show the patch introduced with each commit.
--word-diff Show the patch in a word diff format.
--stat  Show statistics for files modified in each commit.
--shortstat Display only the changed/insertions/deletions line from the --stat command.
--name-only Show the list of files modified after the commit information.
--name-status   Show the list of files affected with added/modified/deleted information as well.
--abbrev-commit Show only the first few characters of the SHA-1 checksum instead of all 40.
--relative-date Display the date in a relative format (for example, “2 weeks ago”) instead of using the full date format.
--graph Display an ASCII graph of the branch and merge history beside the log output.
--pretty    Show commits in an alternate format. Options include oneline, short, full, fuller, and format (where you specify your own format).
--oneline   A convenience option short for `--pretty=oneline --abbrev-commit`.

Limiting Log Output

In addition to output-formatting options, git log takes a number of useful limiting options — that is, options that let you show only a subset of commits. You’ve seen one such option already — the -2 option, which shows only the last two commits. In fact, you can do -<n>, where n is any integer to show the last n commits. In reality, you’re unlikely to use that often, because Git by default pipes all output through a pager so you see only one page of log output at a time.

However, the time-limiting options such as --since and --until are very useful. For example, this command gets the list of commits made in the last two weeks:

$ git log --since=2.weeks

This command works with lots of formats — you can specify a specific date (“2008-01-15”) or a relative date such as “2 years 1 day 3 minutes ago”.

You can also filter the list to commits that match some search criteria. The --author option allows you to filter on a specific author, and the --grep option lets you search for keywords in the commit messages. (Note that if you want to specify both author and grep options, you have to add --all-match or the command will match commits with either.)

The last really useful option to pass to git log as a filter is a path. If you specify a directory or file name, you can limit the log output to commits that introduced a change to those files. This is always the last option and is generally preceded by double dashes (--) to separate the paths from the options.

In Table 2-3 we’ll list these and a few other common options for your reference.

Option  Description
-(n)    Show only the last n commits
--since, --after    Limit the commits to those made after the specified date.
--until, --before   Limit the commits to those made before the specified date.
--author    Only show commits in which the author entry matches the specified string.
--committer Only show commits in which the committer entry matches the specified string.

For example, if you want to see which commits modifying test files in the Git source code history were committed by Junio Hamano in the month of October 2008 and were not merges, you can run something like this:

$ git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/
5610e3b - Fix testcase failure when extended attribute
acd3b9e - Enhance hold_lock_file_for_{update,append}()
f563754 - demonstrate breakage of detached checkout wi
d1a43f2 - reset --hard/read-tree --reset -u: remove un
51a94af - Fix "checkout --track -b newbranch" on detac
b0ad11e - pull: allow "git pull origin $something:$cur

Of the nearly 20,000 commits in the Git source code history, this command shows the 6 that match those criteria.
Using a GUI to Visualize History

If you like to use a more graphical tool to visualize your commit history, you may want to take a look at a Tcl/Tk program called gitk that is distributed with Git. Gitk is basically a visual git log tool, and it accepts nearly all the filtering options that git log does. If you type gitk on the command line in your project, you should see something like Figure 2-2.


Figure 2-2. The gitk history visualizer.

You can see the commit history in the top half of the window along with a nice ancestry graph. The diff viewer in the bottom half of the window shows you the changes introduced at any commit you click.
prev | next


